{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 9,
    "pending": 0,
    "failures": 1,
    "start": "2022-02-04T06:39:17.730Z",
    "end": "2022-02-04T06:39:30.879Z",
    "duration": 13149,
    "testsRegistered": 10,
    "passPercent": 90,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "dc1ecc1e-cc4c-43a0-84f1-27ac04dc9fb8",
      "title": "",
      "fullFile": "cypress/test/apitest/FeatureAPI.js",
      "file": "cypress/test/apitest/FeatureAPI.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "12ecc49c-ce4d-4fc0-91bb-191d1e7b4fdf",
          "title": "Location Features API Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create feature using spaceID - Verify Create feature using valid spaceID",
              "fullTitle": "Location Features API Test Create feature using spaceID - Verify Create feature using valid spaceID",
              "timedOut": null,
              "duration": 5057,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var title = \"Anjali First Space\";\nvar description = \"Anjali First Space as test data\";\ncy.request({\n  method: 'POST',\n  url: '/hub/spaces',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  body: {\n    \"title\": title,\n    \"description\": description\n  }\n}).then(function (spaceResponse) {\n  expect(spaceResponse.status).to.eq(200);\n  createdSpaceId = spaceResponse.body.id;\n  cy.request({\n    method: 'PUT',\n    url: '/hub/spaces/' + createdSpaceId + '/features',\n    auth: {\n      'bearer': Cypress.config('token')\n    },\n    failOnStatusCode: false,\n    body: {\n      \"type\": \"FeatureCollection\",\n      \"features\": [{\n        \"type\": \"Feature\",\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [16.363449, 48.210033]\n        },\n        \"properties\": {\n          \"name\": \"Greentube internet Solution\",\n          \"@ns:com:here:xyz\": {\n            \"createdAt\": 1517504700726,\n            \"updatedAt\": 1517504700726,\n            \"tags\": [\"IT\", \"Company\", \"Software\", \"Solution\"]\n          },\n          \"description\": \"Location of Greentube internet Solution\"\n        }\n      }]\n    }\n  }).then(function (fearureResponse) {\n    expect(fearureResponse.status).to.eq(200);\n    featureID = fearureResponse.body.features[0].id;\n    expect(fearureResponse.body.features[0]).property(\"id\").to.not.be.oneOf([null, \"\"]);\n    expect(fearureResponse.body.features[0].geometry.coordinates[0]).to.eq(16.363449);\n    expect(fearureResponse.body.features[0].geometry.coordinates[1]).to.eq(48.210033);\n  });\n});",
              "err": {},
              "uuid": "b4e806e6-7bab-4a9f-aeb0-8e46af640374",
              "parentUUID": "12ecc49c-ce4d-4fc0-91bb-191d1e7b4fdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update existing feature information which will update Map pin/marker",
              "fullTitle": "Location Features API Test Update existing feature information which will update Map pin/marker",
              "timedOut": null,
              "duration": 897,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PUT',\n  url: '/hub/spaces/' + createdSpaceId + '/features',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  failOnStatusCode: false,\n  body: {\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n      \"type\": \"Feature\",\n      \"id\": featureID,\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [36.363449, 78.210033]\n      },\n      \"properties\": {\n        \"name\": \"XYZ Location\",\n        \"@ns:com:here:xyz\": {\n          \"createdAt\": 1517504700726,\n          \"updatedAt\": 1517504700726,\n          \"tags\": [\"IT\", \"Company\", \"Software\", \"Solution\"]\n        },\n        \"description\": \"Location of XYZ Solution\"\n      }\n    }]\n  }\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(200);\n  expect(fearureResponse.body.features[0]).property(\"id\").to.not.be.oneOf([null, \"\"]);\n  expect(fearureResponse.body.features[0].geometry.coordinates[0]).to.eq(36.363449);\n  expect(fearureResponse.body.features[0].geometry.coordinates[1]).to.eq(78.210033);\n  expect(fearureResponse.body.features[0].properties.description).to.eq(\"Location of XYZ Solution\");\n  expect(fearureResponse.body.features[0].properties.name).to.eq(\"XYZ Location\");\n});",
              "err": {},
              "uuid": "0712aa69-06c0-40cf-a655-61aef4fb0624",
              "parentUUID": "12ecc49c-ce4d-4fc0-91bb-191d1e7b4fdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update Feature Information With Out-Of-Bound Co-ordinate - Verify error message when update existing feature information with invalid co-ordinates",
              "fullTitle": "Location Features API Test Update Feature Information With Out-Of-Bound Co-ordinate - Verify error message when update existing feature information with invalid co-ordinates",
              "timedOut": null,
              "duration": 822,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PUT',\n  url: '/hub/spaces/' + createdSpaceId + '/features',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  failOnStatusCode: false,\n  body: {\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n      \"type\": \"Feature\",\n      \"id\": featureID,\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [1116.363449, 48.210033]\n      },\n      \"properties\": {\n        \"name\": \"Greentube internet Solution\",\n        \"@ns:com:here:xyz\": {\n          \"createdAt\": 1517504700726,\n          \"updatedAt\": 1517504700726,\n          \"tags\": [\"IT\", \"Company\", \"Software\", \"Solution\"]\n        },\n        \"description\": \"Location of Greentube internet Solution\"\n      }\n    }]\n  }\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(400);\n  expect(fearureResponse.body.error).to.eq('IllegalArgument');\n});",
              "err": {},
              "uuid": "1adb189c-9a15-470f-aac8-6429005900e6",
              "parentUUID": "12ecc49c-ce4d-4fc0-91bb-191d1e7b4fdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update Feature Information Without Co-ordinates - Verify error message when update existing feature information without co-ordinates",
              "fullTitle": "Location Features API Test Update Feature Information Without Co-ordinates - Verify error message when update existing feature information without co-ordinates",
              "timedOut": null,
              "duration": 695,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PUT',\n  url: '/hub/spaces/' + createdSpaceId + '/features',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  failOnStatusCode: false,\n  body: {\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n      \"type\": \"Feature\",\n      \"id\": featureID,\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": []\n      },\n      \"properties\": {\n        \"name\": \"Greentube internet Solution\",\n        \"@ns:com:here:xyz\": {\n          \"createdAt\": 1517504700726,\n          \"updatedAt\": 1517504700726,\n          \"tags\": [\"IT\", \"Company\", \"Software\", \"Solution\"]\n        },\n        \"description\": \"Location of Greentube internet Solution\"\n      }\n    }]\n  }\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(400);\n  expect(fearureResponse.body.error).to.eq('IllegalArgument');\n  expect(fearureResponse.body.errorMessage).to.have.string('A coordinates array of a Point must contain at least [longitude, latitude]');\n});",
              "err": {},
              "uuid": "073c7537-daef-4d8e-b86e-5a603c39581a",
              "parentUUID": "12ecc49c-ce4d-4fc0-91bb-191d1e7b4fdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update Feature With Invalid type As Request Body- Verify error message when update existing Feature with invalid type values",
              "fullTitle": "Location Features API Test Update Feature With Invalid type As Request Body- Verify error message when update existing Feature with invalid type values",
              "timedOut": null,
              "duration": 682,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PUT',\n  url: '/hub/spaces/' + createdSpaceId + '/features',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  failOnStatusCode: false,\n  body: {\n    \"type\": \"GenerateErrorMessage\",\n    \"features\": [{\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [3, 3]\n      }\n    }]\n  }\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(400);\n  expect(fearureResponse.body.error).to.eq('IllegalArgument');\n  expect(fearureResponse.body).to.have.property('errorMessage').include(\"Cannot read input JSON string.\");\n});",
              "err": {},
              "uuid": "4ef47f99-2143-4fd3-9305-01f6a7e09d03",
              "parentUUID": "12ecc49c-ce4d-4fc0-91bb-191d1e7b4fdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update Features With Invalid Space ID- Verify error message when update existing feature information With invalid SpaceID",
              "fullTitle": "Location Features API Test Update Features With Invalid Space ID- Verify error message when update existing feature information With invalid SpaceID",
              "timedOut": null,
              "duration": 810,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PUT',\n  url: '/hub/spaces/' + 'ABCD' + '/features',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  failOnStatusCode: false,\n  body: {\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [36.363449, 78.210033]\n      }\n    }]\n  }\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(404);\n  expect(fearureResponse.body.error).to.eq('Exception');\n  expect(fearureResponse.body).to.have.property('errorMessage').to.include(\"The resource with this ID does not exist\");\n});",
              "err": {},
              "uuid": "569a0835-0f7c-4357-a749-cb866ed6e51c",
              "parentUUID": "12ecc49c-ce4d-4fc0-91bb-191d1e7b4fdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update with Invalid SCHEMA - Error Message when update existing feature information With invalid values",
              "fullTitle": "Location Features API Test Update with Invalid SCHEMA - Error Message when update existing feature information With invalid values",
              "timedOut": null,
              "duration": 747,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PUT',\n  url: '/hub/spaces/' + createdSpaceId + '/features',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  failOnStatusCode: false,\n  body: {\n    \"t\": \"FeatureCollection\"\n  }\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(400);\n  expect(fearureResponse.body.error).to.eq('IllegalArgument');\n  expect(fearureResponse.body).to.have.property('errorMessage').to.include(\"Cannot read input JSON string\");\n});",
              "err": {},
              "uuid": "44ed31ef-b438-466c-b2d5-8bbb3cebe405",
              "parentUUID": "12ecc49c-ce4d-4fc0-91bb-191d1e7b4fdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete individual feature which is under given spaceID - Verify delete individual feature of valid spaceID",
              "fullTitle": "Location Features API Test Delete individual feature which is under given spaceID - Verify delete individual feature of valid spaceID",
              "timedOut": null,
              "duration": 947,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var indFeatureId;\ncy.request({\n  method: 'PUT',\n  url: '/hub/spaces/' + createdSpaceId + '/features',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  body: {\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [16.363449, 48.210033]\n      },\n      \"properties\": {\n        \"name\": \"Greentube internet Solution\",\n        \"@ns:com:here:xyz\": {\n          \"createdAt\": 1517504700726,\n          \"updatedAt\": 1517504700726,\n          \"tags\": [\"IT\", \"Company\", \"Software\", \"Solution\"]\n        },\n        \"description\": \"Location of Greentube internet Solution\"\n      }\n    }]\n  }\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(200);\n  indFeatureId = fearureResponse.body.features[0].id;\n  cy.request({\n    method: 'DELETE',\n    url: '/hub/spaces/' + createdSpaceId + '/features/' + indFeatureId,\n    auth: {\n      'bearer': Cypress.config('token')\n    }\n  }).then(function (fearureResponse) {\n    //feature should delete successfully\n    expect(fearureResponse.status).to.eq(204);\n  });\n});",
              "err": {},
              "uuid": "b1e70b4b-c77a-4a66-8bf5-99c8d088df69",
              "parentUUID": "12ecc49c-ce4d-4fc0-91bb-191d1e7b4fdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete all features for invalid spaceID - Verify error message when delete all feature of invalid spaceID",
              "fullTitle": "Location Features API Test Delete all features for invalid spaceID - Verify error message when delete all feature of invalid spaceID",
              "timedOut": null,
              "duration": 1224,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'DELETE',\n  url: '/hub/spaces/' + 'wrongIDyxlkjlkjl' + '/features',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  failOnStatusCode: false\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(404);\n});",
              "err": {
                "message": "AssertionError: expected 502 to equal 404",
                "estack": "AssertionError: expected 502 to equal 404\n    at Context.eval (https://xyz.api.here.com/__cypress/tests?p=cypress\\test\\apitest\\FeatureAPI.js:282:41)",
                "diff": "- 502\n+ 404\n"
              },
              "uuid": "ede449cd-fcca-45a4-8bcd-ef285030638c",
              "parentUUID": "12ecc49c-ce4d-4fc0-91bb-191d1e7b4fdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete Individual feature with invalid feature id for valid spaceID - Verify error message when delete all feature of given invalid spaceID",
              "fullTitle": "Location Features API Test Delete Individual feature with invalid feature id for valid spaceID - Verify error message when delete all feature of given invalid spaceID",
              "timedOut": null,
              "duration": 720,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'DELETE',\n  url: '/hub/spaces/' + createdSpaceId + '/features/' + \"InvalidFeatureIdxyz\",\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  failOnStatusCode: false\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(404);\n});",
              "err": {},
              "uuid": "c007e5dd-7884-47a9-a486-f973045ebf25",
              "parentUUID": "12ecc49c-ce4d-4fc0-91bb-191d1e7b4fdf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b4e806e6-7bab-4a9f-aeb0-8e46af640374",
            "0712aa69-06c0-40cf-a655-61aef4fb0624",
            "1adb189c-9a15-470f-aac8-6429005900e6",
            "073c7537-daef-4d8e-b86e-5a603c39581a",
            "4ef47f99-2143-4fd3-9305-01f6a7e09d03",
            "569a0835-0f7c-4357-a749-cb866ed6e51c",
            "44ed31ef-b438-466c-b2d5-8bbb3cebe405",
            "b1e70b4b-c77a-4a66-8bf5-99c8d088df69",
            "c007e5dd-7884-47a9-a486-f973045ebf25"
          ],
          "failures": [
            "ede449cd-fcca-45a4-8bcd-ef285030638c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12601,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/Reports/APIReports/mocha",
        "reportFilename": "report",
        "overwrite": false,
        "charts": true,
        "html": false,
        "json": true
      },
      "version": "6.0.1"
    }
  }
}