{
  "stats": {
    "suites": 2,
    "tests": 15,
    "passes": 13,
    "pending": 0,
    "failures": 2,
    "start": "2022-02-03T17:07:12.250Z",
    "end": "2022-02-03T17:07:56.964Z",
    "duration": 24251,
    "testsRegistered": 15,
    "passPercent": 86.66666666666667,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "17c2371b-d2a3-4b33-beb6-861c79e8d081",
      "title": "",
      "fullFile": "cypress/test/apitest/SpacesAPI.js",
      "file": "cypress/test/apitest/SpacesAPI.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2aa8c6ef-a1d4-457e-acda-7deeb0bd498f",
          "title": "Location Spaces API Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create Space Without Auth",
              "fullTitle": "Location Spaces API Test Create Space Without Auth",
              "timedOut": null,
              "duration": 1414,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var title = \"Anjali First Space\";\nvar description = \"Anjali First Space as test data\";\ncy.request({\n  method: 'POST',\n  url: '/hub/spaces',\n  body: {\n    \"title\": title,\n    \"description\": description\n  },\n  failOnStatusCode: false\n}).then(function (spaceResponse) {\n  expect(spaceResponse.status).to.eq(401);\n});",
              "err": {
                "message": "AssertionError: expected 400 to equal 401",
                "estack": "AssertionError: expected 400 to equal 401\n    at Context.eval (https://xyz.api.here.com/__cypress/tests?p=cypress\\test\\apitest\\SpacesAPI.js:18:39)",
                "diff": "- 400\n+ 401\n"
              },
              "uuid": "0ded6255-6023-4f94-afff-2c077d5d0ea8",
              "parentUUID": "2aa8c6ef-a1d4-457e-acda-7deeb0bd498f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create Space with Invalid Auth",
              "fullTitle": "Location Spaces API Test Create Space with Invalid Auth",
              "timedOut": null,
              "duration": 896,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var title = \"Anjali First Space\";\nvar description = \"Anjali First Space as test data\";\ncy.request({\n  method: 'POST',\n  url: '/hub/spaces',\n  auth: {\n    'bearer': 'WrongToken'\n  },\n  body: {\n    \"title\": title,\n    \"description\": description\n  },\n  failOnStatusCode: false\n}).then(function (spaceResponse) {\n  expect(spaceResponse.status).to.eq(401);\n  expect(spaceResponse.body).to.have.property('errorMessage', \"Unauthorized\");\n});",
              "err": {},
              "uuid": "97cd6b09-b0eb-453f-bb44-5e1c72785fb6",
              "parentUUID": "2aa8c6ef-a1d4-457e-acda-7deeb0bd498f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create Space with valid inputs",
              "fullTitle": "Location Spaces API Test Create Space with valid inputs",
              "timedOut": null,
              "duration": 3634,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var title = \"Anjali First Space\";\nvar description = \"Anjali First Space as test data\";\ncy.request({\n  method: 'POST',\n  url: '/hub/spaces',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  body: {\n    \"title\": title,\n    \"description\": description\n  }\n}).then(function (spaceResponse) {\n  createdSpaceId = spaceResponse.body.id;\n  expect(spaceResponse.status).to.eq(200);\n  expect(spaceResponse.body).property('id').to.not.be.oneOf([null, \"\"]);\n  expect(spaceResponse.body).to.have.property('title', title);\n  expect(spaceResponse.body).to.have.property('description', description);\n});",
              "err": {},
              "uuid": "b97a0b46-cc79-40c3-af23-1a824cd5e130",
              "parentUUID": "2aa8c6ef-a1d4-457e-acda-7deeb0bd498f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Modify Space",
              "fullTitle": "Location Spaces API Test Modify Space",
              "timedOut": null,
              "duration": 1072,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var title = \"Anjali Modified First Space\";\nvar description = \"Anjali First Space as test data\";\ncy.request({\n  method: 'PATCH',\n  url: '/hub/spaces/' + createdSpaceId,\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  body: {\n    \"title\": title\n  }\n}).then(function (spaceResponse) {\n  expect(spaceResponse.status).to.eq(200);\n  expect(spaceResponse.body).property('id').to.eq(createdSpaceId);\n  expect(spaceResponse.body).to.have.property('title', title);\n  expect(spaceResponse.body).to.have.property('description', description);\n});",
              "err": {},
              "uuid": "5cfc93f5-09b2-403b-9434-a794975ffdbf",
              "parentUUID": "2aa8c6ef-a1d4-457e-acda-7deeb0bd498f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete Space",
              "fullTitle": "Location Spaces API Test Delete Space",
              "timedOut": null,
              "duration": 505,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var title = \"Anjali Modified First Space\";\nvar description = \"Anjali First Space as test data\";\ncy.request({\n  method: 'DELETE',\n  url: '/hub/spaces/' + createdSpaceId,\n  auth: {\n    'bearer': Cypress.config('token')\n  }\n}).then(function (spaceResponse) {\n  expect(spaceResponse.status).to.eq(204);\n  createdSpaceId = 0;\n});",
              "err": {},
              "uuid": "0f055698-b130-49a0-a850-eab1baf2c153",
              "parentUUID": "2aa8c6ef-a1d4-457e-acda-7deeb0bd498f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "97cd6b09-b0eb-453f-bb44-5e1c72785fb6",
            "b97a0b46-cc79-40c3-af23-1a824cd5e130",
            "5cfc93f5-09b2-403b-9434-a794975ffdbf",
            "0f055698-b130-49a0-a850-eab1baf2c153"
          ],
          "failures": [
            "0ded6255-6023-4f94-afff-2c077d5d0ea8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7521,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "6cd42bb9-7d54-4450-92cb-5cb346b32abe",
      "title": "",
      "fullFile": "cypress/test/apitest/FeatureAPI.js",
      "file": "cypress/test/apitest/FeatureAPI.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "727ecc71-0a4d-47e2-ba97-eda0266a67b1",
          "title": "Location Features API Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create feature using spaceID - Verify Create feature using valid spaceID",
              "fullTitle": "Location Features API Test Create feature using spaceID - Verify Create feature using valid spaceID",
              "timedOut": null,
              "duration": 5326,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var title = \"Anjali First Space\";\nvar description = \"Anjali First Space as test data\";\ncy.request({\n  method: 'POST',\n  url: '/hub/spaces',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  body: {\n    \"title\": title,\n    \"description\": description\n  }\n}).then(function (spaceResponse) {\n  expect(spaceResponse.status).to.eq(200);\n  createdSpaceId = spaceResponse.body.id;\n  cy.request({\n    method: 'PUT',\n    url: '/hub/spaces/' + createdSpaceId + '/features',\n    auth: {\n      'bearer': Cypress.config('token')\n    },\n    failOnStatusCode: false,\n    body: {\n      \"type\": \"FeatureCollection\",\n      \"features\": [{\n        \"type\": \"Feature\",\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [16.363449, 48.210033]\n        },\n        \"properties\": {\n          \"name\": \"Greentube internet Solution\",\n          \"@ns:com:here:xyz\": {\n            \"createdAt\": 1517504700726,\n            \"updatedAt\": 1517504700726,\n            \"tags\": [\"IT\", \"Company\", \"Software\", \"Solution\"]\n          },\n          \"description\": \"Location of Greentube internet Solution\"\n        }\n      }]\n    }\n  }).then(function (fearureResponse) {\n    expect(fearureResponse.status).to.eq(200);\n    featureID = fearureResponse.body.features[0].id;\n    expect(fearureResponse.body.features[0]).property(\"id\").to.not.be.oneOf([null, \"\"]);\n    expect(fearureResponse.body.features[0].geometry.coordinates[0]).to.eq(16.363449);\n    expect(fearureResponse.body.features[0].geometry.coordinates[1]).to.eq(48.210033);\n  });\n});",
              "err": {},
              "uuid": "ac0066a0-67c0-4a04-b4ff-9d684655bc1c",
              "parentUUID": "727ecc71-0a4d-47e2-ba97-eda0266a67b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update existing feature information which will update Map pin/marker",
              "fullTitle": "Location Features API Test Update existing feature information which will update Map pin/marker",
              "timedOut": null,
              "duration": 1317,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PUT',\n  url: '/hub/spaces/' + createdSpaceId + '/features',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  failOnStatusCode: false,\n  body: {\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n      \"type\": \"Feature\",\n      \"id\": featureID,\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [36.363449, 78.210033]\n      },\n      \"properties\": {\n        \"name\": \"XYZ Location\",\n        \"@ns:com:here:xyz\": {\n          \"createdAt\": 1517504700726,\n          \"updatedAt\": 1517504700726,\n          \"tags\": [\"IT\", \"Company\", \"Software\", \"Solution\"]\n        },\n        \"description\": \"Location of XYZ Solution\"\n      }\n    }]\n  }\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(200);\n  expect(fearureResponse.body.features[0]).property(\"id\").to.not.be.oneOf([null, \"\"]);\n  expect(fearureResponse.body.features[0].geometry.coordinates[0]).to.eq(36.363449);\n  expect(fearureResponse.body.features[0].geometry.coordinates[1]).to.eq(78.210033);\n  expect(fearureResponse.body.features[0].properties.description).to.eq(\"Location of XYZ Solution\");\n  expect(fearureResponse.body.features[0].properties.name).to.eq(\"XYZ Location\");\n});",
              "err": {},
              "uuid": "fe773fb8-3689-418a-be43-e1ced55573b1",
              "parentUUID": "727ecc71-0a4d-47e2-ba97-eda0266a67b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update Feature Information With Out-Of-Bound Co-ordinate - Verify error message when update existing feature information with invalid co-ordinates",
              "fullTitle": "Location Features API Test Update Feature Information With Out-Of-Bound Co-ordinate - Verify error message when update existing feature information with invalid co-ordinates",
              "timedOut": null,
              "duration": 1011,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PUT',\n  url: '/hub/spaces/' + createdSpaceId + '/features',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  failOnStatusCode: false,\n  body: {\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n      \"type\": \"Feature\",\n      \"id\": featureID,\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [1116.363449, 48.210033]\n      },\n      \"properties\": {\n        \"name\": \"Greentube internet Solution\",\n        \"@ns:com:here:xyz\": {\n          \"createdAt\": 1517504700726,\n          \"updatedAt\": 1517504700726,\n          \"tags\": [\"IT\", \"Company\", \"Software\", \"Solution\"]\n        },\n        \"description\": \"Location of Greentube internet Solution\"\n      }\n    }]\n  }\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(400);\n  expect(fearureResponse.body.error).to.eq('IllegalArgument');\n});",
              "err": {},
              "uuid": "f72a52f9-4d18-48bd-8855-fa6239bbca43",
              "parentUUID": "727ecc71-0a4d-47e2-ba97-eda0266a67b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update Feature Information Without Co-ordinates - Verify error message when update existing feature information without co-ordinates",
              "fullTitle": "Location Features API Test Update Feature Information Without Co-ordinates - Verify error message when update existing feature information without co-ordinates",
              "timedOut": null,
              "duration": 1144,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PUT',\n  url: '/hub/spaces/' + createdSpaceId + '/features',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  failOnStatusCode: false,\n  body: {\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n      \"type\": \"Feature\",\n      \"id\": featureID,\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": []\n      },\n      \"properties\": {\n        \"name\": \"Greentube internet Solution\",\n        \"@ns:com:here:xyz\": {\n          \"createdAt\": 1517504700726,\n          \"updatedAt\": 1517504700726,\n          \"tags\": [\"IT\", \"Company\", \"Software\", \"Solution\"]\n        },\n        \"description\": \"Location of Greentube internet Solution\"\n      }\n    }]\n  }\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(400);\n  expect(fearureResponse.body.error).to.eq('IllegalArgument');\n  expect(fearureResponse.body.errorMessage).to.have.string('A coordinates array of a Point must contain at least [longitude, latitude]');\n});",
              "err": {},
              "uuid": "d6bdae6e-65c9-47b3-8a1c-0071e2ec6b7c",
              "parentUUID": "727ecc71-0a4d-47e2-ba97-eda0266a67b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update Feature With Invalid type As Request Body- Verify error message when update existing Feature with invalid type values",
              "fullTitle": "Location Features API Test Update Feature With Invalid type As Request Body- Verify error message when update existing Feature with invalid type values",
              "timedOut": null,
              "duration": 923,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PUT',\n  url: '/hub/spaces/' + createdSpaceId + '/features',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  failOnStatusCode: false,\n  body: {\n    \"type\": \"GenerateErrorMessage\",\n    \"features\": [{\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [3, 3]\n      }\n    }]\n  }\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(400);\n  expect(fearureResponse.body.error).to.eq('IllegalArgument');\n  expect(fearureResponse.body).to.have.property('errorMessage').include(\"Cannot read input JSON string.\");\n});",
              "err": {},
              "uuid": "3891f2f5-7bc8-43c1-8ed4-467985d69849",
              "parentUUID": "727ecc71-0a4d-47e2-ba97-eda0266a67b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update Features With Invalid Space ID- Verify error message when update existing feature information With invalid SpaceID",
              "fullTitle": "Location Features API Test Update Features With Invalid Space ID- Verify error message when update existing feature information With invalid SpaceID",
              "timedOut": null,
              "duration": 986,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PUT',\n  url: '/hub/spaces/' + 'ABCD' + '/features',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  failOnStatusCode: false,\n  body: {\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [36.363449, 78.210033]\n      }\n    }]\n  }\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(404);\n  expect(fearureResponse.body.error).to.eq('Exception');\n  expect(fearureResponse.body).to.have.property('errorMessage').to.include(\"The resource with this ID does not exist\");\n});",
              "err": {},
              "uuid": "8905578a-dc15-4ec2-9a7d-b58296e6b13f",
              "parentUUID": "727ecc71-0a4d-47e2-ba97-eda0266a67b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update with Invalid SCHEMA - Error Message when update existing feature information With invalid values",
              "fullTitle": "Location Features API Test Update with Invalid SCHEMA - Error Message when update existing feature information With invalid values",
              "timedOut": null,
              "duration": 967,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PUT',\n  url: '/hub/spaces/' + createdSpaceId + '/features',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  failOnStatusCode: false,\n  body: {\n    \"t\": \"FeatureCollection\"\n  }\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(400);\n  expect(fearureResponse.body.error).to.eq('IllegalArgument');\n  expect(fearureResponse.body).to.have.property('errorMessage').to.include(\"Cannot read input JSON string\");\n});",
              "err": {},
              "uuid": "62f3c90e-365f-4472-9599-a6468947ba0a",
              "parentUUID": "727ecc71-0a4d-47e2-ba97-eda0266a67b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete individual feature which is under given spaceID - Verify delete individual feature of valid spaceID",
              "fullTitle": "Location Features API Test Delete individual feature which is under given spaceID - Verify delete individual feature of valid spaceID",
              "timedOut": null,
              "duration": 1835,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var indFeatureId;\ncy.request({\n  method: 'PUT',\n  url: '/hub/spaces/' + createdSpaceId + '/features',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  body: {\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [16.363449, 48.210033]\n      },\n      \"properties\": {\n        \"name\": \"Greentube internet Solution\",\n        \"@ns:com:here:xyz\": {\n          \"createdAt\": 1517504700726,\n          \"updatedAt\": 1517504700726,\n          \"tags\": [\"IT\", \"Company\", \"Software\", \"Solution\"]\n        },\n        \"description\": \"Location of Greentube internet Solution\"\n      }\n    }]\n  }\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(200);\n  indFeatureId = fearureResponse.body.features[0].id;\n  cy.request({\n    method: 'DELETE',\n    url: '/hub/spaces/' + createdSpaceId + '/features/' + indFeatureId,\n    auth: {\n      'bearer': Cypress.config('token')\n    }\n  }).then(function (fearureResponse) {\n    //feature should delete successfully\n    expect(fearureResponse.status).to.eq(204);\n  });\n});",
              "err": {},
              "uuid": "8879eede-95f5-475e-b5df-525970a16caa",
              "parentUUID": "727ecc71-0a4d-47e2-ba97-eda0266a67b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete all features for invalid spaceID - Verify error message when delete all feature of invalid spaceID",
              "fullTitle": "Location Features API Test Delete all features for invalid spaceID - Verify error message when delete all feature of invalid spaceID",
              "timedOut": null,
              "duration": 2269,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'DELETE',\n  url: '/hub/spaces/' + 'wrongIDyxlkjlkjl' + '/features',\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  failOnStatusCode: false\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(404);\n});",
              "err": {
                "message": "AssertionError: expected 502 to equal 404",
                "estack": "AssertionError: expected 502 to equal 404\n    at Context.eval (https://xyz.api.here.com/__cypress/tests?p=cypress\\test\\apitest\\FeatureAPI.js:282:41)",
                "diff": "- 502\n+ 404\n"
              },
              "uuid": "60a68287-faa0-48e8-af62-e9dfff100f7d",
              "parentUUID": "727ecc71-0a4d-47e2-ba97-eda0266a67b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete Individual feature with invalid feature id for valid spaceID - Verify error message when delete all feature of given invalid spaceID",
              "fullTitle": "Location Features API Test Delete Individual feature with invalid feature id for valid spaceID - Verify error message when delete all feature of given invalid spaceID",
              "timedOut": null,
              "duration": 952,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'DELETE',\n  url: '/hub/spaces/' + createdSpaceId + '/features/' + \"InvalidFeatureIdxyz\",\n  auth: {\n    'bearer': Cypress.config('token')\n  },\n  failOnStatusCode: false\n}).then(function (fearureResponse) {\n  expect(fearureResponse.status).to.eq(404);\n});",
              "err": {},
              "uuid": "1421b49b-aa57-4ce6-b8a5-af2bbba76c19",
              "parentUUID": "727ecc71-0a4d-47e2-ba97-eda0266a67b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ac0066a0-67c0-4a04-b4ff-9d684655bc1c",
            "fe773fb8-3689-418a-be43-e1ced55573b1",
            "f72a52f9-4d18-48bd-8855-fa6239bbca43",
            "d6bdae6e-65c9-47b3-8a1c-0071e2ec6b7c",
            "3891f2f5-7bc8-43c1-8ed4-467985d69849",
            "8905578a-dc15-4ec2-9a7d-b58296e6b13f",
            "62f3c90e-365f-4472-9599-a6468947ba0a",
            "8879eede-95f5-475e-b5df-525970a16caa",
            "1421b49b-aa57-4ce6-b8a5-af2bbba76c19"
          ],
          "failures": [
            "60a68287-faa0-48e8-af62-e9dfff100f7d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 16730,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/Reports/APIReports/mocha",
        "reportFilename": "report",
        "overwrite": false,
        "charts": true,
        "html": false,
        "json": true,
        "autoOpen": true
      },
      "version": "6.0.1"
    }
  }
}